package com.longbridge.services.implementations;

import com.longbridge.dto.CardPaymentDTO;
import com.longbridge.exception.WawoohException;
import com.longbridge.models.Orders;
import com.longbridge.models.RavePayment;
import com.longbridge.repository.OrderRepository;
import com.longbridge.repository.RavePaymentRepository;
import com.longbridge.services.RavePaymentService;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

/**
 * Created by Longbridge on 31/07/2018.
 */
@Service
public class RavePaymentServiceImpl implements RavePaymentService {
    @Autowired
    RavePaymentRepository ravePaymentRepository;

    @Autowired
    OrderRepository orderRepository;

    @Value("${rave.secret}")
    private String secret;

    //Endpoint to verify transaction
    private final String VERIFY_ENDPOINT = "https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/v2/verify";

    @Override
    public String validateTransaction(CardPaymentDTO cardPaymentDTO) {

        /**
         *
         * Method to
         *
         * @param paymententity - <b>paymententity - set as a constant with default value as 1</b>
         * @param txref - <b>txref - is the unique payment reference generated by the merchant.</b>
         * @param secret - <b>secret - is the merchant secret key</b>
         * @return
         * @throws UnirestException
         */

        RavePayment ravePayment = ravePaymentRepository.findOne(cardPaymentDTO.getOrderId());
        double amount = ravePayment.getTransactionAmount();
        String trnxRef = ravePayment.getTransactionReference();
        try {
            String status = verify(trnxRef,cardPaymentDTO.getFlwRef(),secret,amount,1).getString("status");
            if(status.equalsIgnoreCase("00")){
                return orderRepository.findOne(ravePayment.getOrderId()).getOrderNum();
            }

            if(status.equalsIgnoreCase("56")){
                return "false";
            }

        }catch (Exception e){
            e.printStackTrace();
            throw new WawoohException();
        }



        return null;
    }


    public JSONObject verify(String transactionRef, String flwRef, String secret, double amount, int paymententity) throws UnirestException, Exception {

        // This packages the payload
        JSONObject data = new JSONObject();
        data.put("txref", transactionRef);
        data.put("SECKEY", secret);

        // end of payload

        // This sends the request to server with payload
        HttpResponse<JsonNode> response = Unirest.post(VERIFY_ENDPOINT)
                .header("Content-Type", "application/json")
                .body(data)
                .asJson();

        // This get the response from payload
        JsonNode jsonNode = response.getBody();

        // This get the json object from payload
        JSONObject responseObject = jsonNode.getObject();

        // check of no object is returned
        if(responseObject == null)
            throw new Exception("No response from server");

        // This get status from returned payload
        String status = responseObject.optString("status", null);

        // this ensures that status is not null
        if(status == null)
            throw new Exception("Transaction status unknown");

        // This confirms the transaction exist on rave
        if(!"success".equalsIgnoreCase(status)){

            String message = responseObject.optString("message", null);

            throw new Exception(message);
        }

        data = responseObject.getJSONObject("data");

        // This get the amount stored on server
        double actualAmount = data.getDouble("amount");

        // This validates that the amount stored on client is same returned
        if(actualAmount < amount) {
            data.put("status","56");
            //throw new Exception("Amount does not match");

            return data;
        }
        else {
            data.put("status","00");
            return data;

        }

        // now you can give value for payment.

    }

}
